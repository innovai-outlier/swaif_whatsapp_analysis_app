# SWAI Settings - Configura√ß√µes Centralizadas
# Baseado na filosofia SWAI: simplicidade, eleg√¢ncia e prop√≥sito

"""
Configura√ß√µes centralizadas do SWAI WhatsApp Analyzer
Inspirado nos princ√≠pios de Senna (perfei√ß√£o t√©cnica) e Stark (inova√ß√£o respons√°vel)
"""

import os
from pathlib import Path

# Caminhos base
BASE_DIR = Path(__file__).parent.parent
DATA_DIR = BASE_DIR / "data"
ASSETS_DIR = BASE_DIR / "assets"

# Configura√ß√µes visuais (inspiradas na filosofia cl√°ssica)
SWAI_SETTINGS = {
    # Cores - Paleta SWAI (inspirada no cosmos e na terra)
    "PRIMARY_COLOR": "#0A1128",     # Azul c√≥smico (profundidade do conhecimento)
    "SECONDARY_COLOR": "#FF7F11",   # Laranja energ√©tico (for√ßa vital)
    "SUCCESS_COLOR": "#28a745",     # Verde da natureza (crescimento)
    "WARNING_COLOR": "#ffc107",     # Amarelo do sol (aten√ß√£o)
    "ERROR_COLOR": "#dc3545",       # Vermelho do fogo (urg√™ncia)
    "INFO_COLOR": "#17a2b8",        # Azul √°gua (informa√ß√£o)
    
    # Configura√ß√µes de neg√≥cio
    "VALOR_MEDIO_CONSULTA": 800.0,
    "LEADS_DIARIOS": 5,
    "DIAS_UTEIS_MES": 20,
    "DIAS_UTEIS_ANO": 240,
    
    # Caminhos de arquivos
    "LOGO_PATH": str(ASSETS_DIR / "image.png"),
    "SUCCESS_CASES_DIR": str(DATA_DIR / "success_cases"),
    "FAIL_CASES_DIR": str(DATA_DIR / "fail_cases"),
    "FEATURES_CSV": str(DATA_DIR / "extracted_features_enhanced.csv"),
    "ANALYSIS_JSON": str(DATA_DIR / "detailed_analysis_results.json"),
    
    # Configura√ß√µes de UI
    "APP_TITLE": "SWAI WhatsApp Analyzer",
    "APP_SUBTITLE": "Libertando o potencial humano atrav√©s da an√°lise inteligente",
    "PAGE_ICON": "üß†",
    "LAYOUT": "wide",
    
    # Limites e thresholds
    "MIN_CONVERSATION_MESSAGES": 3,
    "MAX_CONVERSATION_DURATION": 1440,  # 24 horas em minutos
    "SUCCESS_RATE_THRESHOLD": 0.6,      # 60% taxa de sucesso ideal
    "COST_ALERT_THRESHOLD": 10000.0,    # R$ 10k alerta de custo alto
    
    # Configura√ß√µes de an√°lise
    "AGENDAMENTO_KEYWORDS": [
        "agendar", "agenda", "consulta", "hor√°rio", "disponibilidade",
        "marca√ß√£o", "marcar", "quando", "data", "hor√°rios"
    ],
    
    "PRECO_KEYWORDS": [
        "pre√ßo", "valor", "custo", "quanto", "custa", "cobrar",
        "pagamento", "pagar", "investimento", "valores"
    ],
    
    # Mensagens do sistema
    "MESSAGES": {
        "no_data": "‚ùå Dados n√£o encontrados. Execute primeiro a extra√ß√£o de features.",
        "data_loaded": "‚úÖ Dados carregados com sucesso!",
        "feature_disabled": "‚è∏Ô∏è Funcionalidade desabilitada",
        "processing": "üîÑ Processando dados...",
        "error": "‚ùå Erro no processamento",
        "success": "‚úÖ Opera√ß√£o realizada com sucesso"
    }
}

def get_setting(key: str, default=None):
    """
    Obt√©m uma configura√ß√£o do sistema
    
    Args:
        key (str): Chave da configura√ß√£o
        default: Valor padr√£o se n√£o encontrar
        
    Returns:
        Valor da configura√ß√£o ou padr√£o
    """
    return SWAI_SETTINGS.get(key, default)

def update_setting(key: str, value):
    """
    Atualiza uma configura√ß√£o do sistema
    
    Args:
        key (str): Chave da configura√ß√£o
        value: Novo valor
    """
    SWAI_SETTINGS[key] = value

def get_financial_settings() -> dict:
    """
    Retorna configura√ß√µes financeiras
    
    Returns:
        dict: Configura√ß√µes financeiras
    """
    return {
        "valor_consulta": SWAI_SETTINGS["VALOR_MEDIO_CONSULTA"],
        "leads_diarios": SWAI_SETTINGS["LEADS_DIARIOS"],
        "dias_uteis_mes": SWAI_SETTINGS["DIAS_UTEIS_MES"],
        "dias_uteis_ano": SWAI_SETTINGS["DIAS_UTEIS_ANO"]
    }

def update_financial_settings(valor_consulta=None, leads_diarios=None):
    """
    Atualiza configura√ß√µes financeiras
    
    Args:
        valor_consulta (float, optional): Valor m√©dio da consulta
        leads_diarios (int, optional): N√∫mero de leads por dia
    """
    if valor_consulta is not None:
        SWAI_SETTINGS["VALOR_MEDIO_CONSULTA"] = float(valor_consulta)
    
    if leads_diarios is not None:
        SWAI_SETTINGS["LEADS_DIARIOS"] = int(leads_diarios)

def get_color_scheme() -> dict:
    """
    Retorna esquema de cores do SWAI
    
    Returns:
        dict: Cores do sistema
    """
    return {
        "primary": SWAI_SETTINGS["PRIMARY_COLOR"],
        "secondary": SWAI_SETTINGS["SECONDARY_COLOR"],
        "success": SWAI_SETTINGS["SUCCESS_COLOR"],
        "warning": SWAI_SETTINGS["WARNING_COLOR"],
        "error": SWAI_SETTINGS["ERROR_COLOR"],
        "info": SWAI_SETTINGS["INFO_COLOR"]
    }

def ensure_directories():
    """
    Garante que os diret√≥rios necess√°rios existam
    """
    directories = [
        DATA_DIR,
        DATA_DIR / "success_cases",
        DATA_DIR / "fail_cases",
        ASSETS_DIR
    ]
    
    for directory in directories:
        directory.mkdir(parents=True, exist_ok=True)

# Inicializa√ß√£o
if __name__ == "__main__":
    ensure_directories()
    print("üéØ SWAI Settings - Configura√ß√µes carregadas")
    print(f"üìÅ Diret√≥rio base: {BASE_DIR}")
    print(f"üí∞ Valor consulta: R$ {SWAI_SETTINGS['VALOR_MEDIO_CONSULTA']}")
    print(f"üìä Leads di√°rios: {SWAI_SETTINGS['LEADS_DIARIOS']}")

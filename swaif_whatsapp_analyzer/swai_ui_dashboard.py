# SWAI UI Dashboard - Interface Simplificada
# Filosofia: Clareza visual que liberta o tempo mental

"""
Dashboard principal do SWAI WhatsApp Analyzer
Interface limpa focada no essencial
"""

import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd

def show_dashboard():
    """
    Exibe o dashboard principal do SWAI
    """
    
    # Importa√ß√µes locais para evitar depend√™ncias circulares
    from swai_settings import SWAI_SETTINGS, get_financial_settings, get_color_scheme
    from swai_core import SWAIAnalyzer, create_sample_data
    from swai_features import feature_enabled
    
    st.title("üìä Dashboard SWAI")
    st.markdown("*Vis√£o estrat√©gica para tomada de decis√£o inteligente*")
    
    # Verificar se funcionalidade est√° habilitada
    if not feature_enabled("dashboard"):
        st.warning("‚è∏Ô∏è Dashboard est√° desabilitado. Ative nas configura√ß√µes.")
        return
    
    # Inicializar analisador
    analyzer = SWAIAnalyzer(SWAI_SETTINGS)
    colors = get_color_scheme()
    
    # Carregar dados
    with st.spinner("üîÑ Carregando dados..."):
        df = analyzer.load_conversation_data()
        
        # Se n√£o h√° dados reais, usar dados de exemplo
        if df is None or df.empty:
            st.info("üìù Usando dados de exemplo para demonstra√ß√£o")
            df = create_sample_data()
            is_sample_data = True
        else:
            is_sample_data = False
    
    if df.empty:
        st.error("‚ùå Nenhum dado dispon√≠vel para an√°lise")
        return
    
    # Calcular m√©tricas
    metrics = analyzer.calculate_basic_metrics(df)
    financial_config = get_financial_settings()
    opportunity_cost = analyzer.calculate_opportunity_cost(metrics, financial_config)
    insights = analyzer.generate_insights(metrics, opportunity_cost)
    
    # === SE√á√ÉO 1: M√âTRICAS PRINCIPAIS ===
    st.markdown("### üéØ M√©tricas Principais")
    
    summary = metrics.get('summary', {})
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üìû Total de Conversas",
            value=summary.get('total_conversations', 0),
            help="N√∫mero total de conversas analisadas"
        )
    
    with col2:
        success_rate = summary.get('success_rate', 0)
        st.metric(
            label="‚úÖ Taxa de Convers√£o",
            value=f"{success_rate:.1%}",
            delta=f"{success_rate - 0.6:.1%}" if success_rate > 0.6 else f"{success_rate - 0.6:.1%}",
            delta_color="normal",
            help="Percentual de conversas que resultaram em agendamento"
        )
    
    with col3:
        avg_duration = summary.get('avg_duration', 0)
        st.metric(
            label="‚è±Ô∏è Dura√ß√£o M√©dia",
            value=f"{avg_duration:.1f} min",
            help="Tempo m√©dio de dura√ß√£o das conversas"
        )
    
    with col4:
        current_costs = opportunity_cost.get('current_costs', {})
        custo_mensal = current_costs.get('mensal', 0)
        st.metric(
            label="üí∞ Custo Mensal",
            value=analyzer.format_currency(custo_mensal),
            delta=f"-{analyzer.format_currency(custo_mensal)}" if custo_mensal > 0 else "R$ 0,00",
            delta_color="inverse",
            help="Receita perdida por m√™s devido a leads n√£o convertidos"
        )
    
    # === SE√á√ÉO 2: AN√ÅLISE VISUAL ===
    st.markdown("---")
    st.markdown("### üìà An√°lise Visual")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico de pizza - Taxa de convers√£o
        st.subheader("ü•ß Distribui√ß√£o de Resultados")
        
        success_count = summary.get('success_count', 0)
        fail_count = summary.get('fail_count', 0)
        
        fig_pie = go.Figure(data=[go.Pie(
            labels=['Sucessos', 'Falhas'],
            values=[success_count, fail_count],
            hole=0.4,
            marker_colors=[colors['success'], colors['error']],
            textinfo='label+percent',
            textfont_size=12
        )])
        
        fig_pie.update_layout(
            showlegend=True,
            height=350,
            margin=dict(l=20, r=20, t=20, b=20)
        )
        
        st.plotly_chart(fig_pie, use_container_width=True)
    
    with col2:
        # Gr√°fico de barras - Compara√ß√£o m√©tricas
        st.subheader("üìä Sucesso vs Falha")
        
        success_metrics = metrics.get('success_metrics', {})
        fail_metrics = metrics.get('fail_metrics', {})
        
        if success_metrics and fail_metrics:
            comparison_data = {
                'M√©trica': ['Dura√ß√£o (min)', 'Mensagens', 'Intera√ß√µes', 'Palavras Agendamento'],
                'Sucesso': [
                    success_metrics.get('avg_duration', 0),
                    success_metrics.get('avg_messages', 0),
                    success_metrics.get('avg_interactions', 0),
                    success_metrics.get('avg_agendamento_keywords', 0)
                ],
                'Falha': [
                    fail_metrics.get('avg_duration', 0),
                    fail_metrics.get('avg_messages', 0),
                    fail_metrics.get('avg_interactions', 0),
                    fail_metrics.get('avg_agendamento_keywords', 0)
                ]
            }
            
            fig_bar = go.Figure()
            fig_bar.add_trace(go.Bar(
                name='Sucesso',
                x=comparison_data['M√©trica'],
                y=comparison_data['Sucesso'],
                marker_color=colors['success']
            ))
            fig_bar.add_trace(go.Bar(
                name='Falha',
                x=comparison_data['M√©trica'],
                y=comparison_data['Falha'],
                marker_color=colors['error']
            ))
            
            fig_bar.update_layout(
                barmode='group',
                height=350,
                margin=dict(l=20, r=20, t=20, b=20)
            )
            
            st.plotly_chart(fig_bar, use_container_width=True)
    
    # === SE√á√ÉO 3: CUSTO DE OPORTUNIDADE ===
    if feature_enabled("cost_calculator"):
        st.markdown("---")
        st.markdown("### üí∞ Impacto Financeiro")
        
        col1, col2, col3, col4 = st.columns(4)
        
        current_costs = opportunity_cost.get('current_costs', {})
        
        with col1:
            st.metric(
                label="Custo Di√°rio",
                value=analyzer.format_currency(current_costs.get('diario', 0)),
                help="Receita perdida por dia"
            )
        
        with col2:
            st.metric(
                label="Custo Semanal",
                value=analyzer.format_currency(current_costs.get('semanal', 0)),
                help="Receita perdida por semana"
            )
        
        with col3:
            st.metric(
                label="Custo Mensal",
                value=analyzer.format_currency(current_costs.get('mensal', 0)),
                help="Receita perdida por m√™s"
            )
        
        with col4:
            st.metric(
                label="Custo Anual",
                value=analyzer.format_currency(current_costs.get('anual', 0)),
                help="Receita perdida por ano"
            )
        
        # Gr√°fico de proje√ß√£o temporal
        if feature_enabled("advanced_charts"):
            st.subheader("üìà Proje√ß√£o de Custos")
            
            periods = ['Di√°rio', 'Semanal', 'Mensal', 'Anual']
            costs = [
                current_costs.get('diario', 0),
                current_costs.get('semanal', 0),
                current_costs.get('mensal', 0),
                current_costs.get('anual', 0)
            ]
            
            fig_timeline = go.Figure()
            fig_timeline.add_trace(go.Bar(
                x=periods,
                y=costs,
                marker_color=colors['warning'],
                text=[analyzer.format_currency(cost) for cost in costs],
                textposition='auto'
            ))
            
            fig_timeline.update_layout(
                title="Evolu√ß√£o dos Custos de Oportunidade",
                xaxis_title="Per√≠odo",
                yaxis_title="Valor (R$)",
                height=350,
                margin=dict(l=20, r=20, t=40, b=20)
            )
            
            st.plotly_chart(fig_timeline, use_container_width=True)
    
    # === SE√á√ÉO 4: INSIGHTS E RECOMENDA√á√ïES ===
    st.markdown("---")
    st.markdown("### üí° Insights e Recomenda√ß√µes")
    
    if insights:
        for insight in insights:
            insight_type = insight.get('type', 'info')
            title = insight.get('title', 'Insight')
            message = insight.get('message', '')
            action = insight.get('action', '')
            
            if insight_type == 'warning':
                st.warning(f"‚ö†Ô∏è **{title}**\n\n{message}\n\nüéØ **A√ß√£o:** {action}")
            elif insight_type == 'success':
                st.success(f"‚úÖ **{title}**\n\n{message}\n\nüéØ **A√ß√£o:** {action}")
            else:
                st.info(f"üí° **{title}**\n\n{message}\n\nüéØ **A√ß√£o:** {action}")
    else:
        st.info("üìù Nenhum insight espec√≠fico dispon√≠vel no momento.")
    
    # === SE√á√ÉO 5: RESUMO EXECUTIVO ===
    st.markdown("---")
    st.markdown("### üìã Resumo Executivo")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üéØ Performance Atual")
        st.markdown(f"""
        - **Taxa de Convers√£o:** {analyzer.format_percentage(success_rate)}
        - **Conversas Analisadas:** {summary.get('total_conversations', 0)}
        - **Dura√ß√£o M√©dia:** {avg_duration:.1f} minutos
        - **Engajamento:** {summary.get('avg_messages', 0):.1f} mensagens/conversa
        """)
    
    with col2:
        st.markdown("#### üí∞ Impacto Financeiro")
        st.markdown(f"""
        - **Custo Mensal:** {analyzer.format_currency(custo_mensal)}
        - **Valor por Lead:** {analyzer.format_currency(financial_config.get('valor_consulta', 800))}
        - **Leads Di√°rios:** {financial_config.get('leads_diarios', 5)}
        - **Potencial de Melhoria:** Alta
        """)
    
    # === SE√á√ÉO 6: A√á√ïES RECOMENDADAS ===
    st.markdown("---")
    st.markdown("### üöÄ Pr√≥ximas A√ß√µes")
    
    # Gerar recomenda√ß√µes baseadas nos dados
    recommendations = []
    
    if success_rate < 0.5:
        recommendations.append("üî¥ **URGENTE:** Revisar processo de atendimento - taxa de convers√£o cr√≠tica")
    
    if success_rate < 0.6:
        recommendations.append("üü° **PRIORIDADE:** Treinar equipe em t√©cnicas de convers√£o")
    
    if custo_mensal > 5000:
        recommendations.append("üí∞ **FINANCEIRO:** Alto custo de oportunidade - ROI de melhorias garantido")
    
    if success_metrics and fail_metrics:
        if success_metrics.get('avg_duration', 0) > fail_metrics.get('avg_duration', 0) * 1.2:
            recommendations.append("‚è±Ô∏è **PROCESSO:** Investir tempo nas conversas gera resultados")
        
        if success_metrics.get('avg_agendamento_keywords', 0) > fail_metrics.get('avg_agendamento_keywords', 0) * 1.5:
            recommendations.append("üéØ **TREINAMENTO:** Focar vocabul√°rio de agendamento")
    
    if not recommendations:
        recommendations.append("‚úÖ **MANUTEN√á√ÉO:** Performance dentro do esperado - manter padr√£o atual")
    
    for i, rec in enumerate(recommendations, 1):
        st.markdown(f"{i}. {rec}")
    
    # === FOOTER ===
    st.markdown("---")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîÑ Atualizar Dados", use_container_width=True):
            st.experimental_rerun()
    
    with col2:
        if feature_enabled("export_data") and st.button("üìä Exportar Relat√≥rio", use_container_width=True):
            # Aqui seria implementada a exporta√ß√£o
            st.success("üìÑ Relat√≥rio exportado com sucesso!")
    
    with col3:
        if st.button("‚öôÔ∏è Configura√ß√µes", use_container_width=True):
            st.info("üîß Redirecionando para configura√ß√µes...")
    
    # Aviso sobre dados de exemplo
    if is_sample_data:
        st.info("""
        üìù **Dados de Demonstra√ß√£o**
        
        Voc√™ est√° visualizando dados de exemplo. Para usar dados reais:
        1. Coloque os arquivos de conversa nas pastas `data/success_cases/` e `data/fail_cases/`
        2. Execute o extrator de features
        3. Recarregue o dashboard
        """)

def show_dashboard_config():
    """
    Configura√ß√µes espec√≠ficas do dashboard
    """
    st.subheader("üéõÔ∏è Configura√ß√µes do Dashboard")
    
    from swai_features import feature_enabled, toggle_feature
    
    # Controles liga-desliga para sub-funcionalidades
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìä Componentes Visuais")
        
        advanced_charts = st.checkbox(
            "Gr√°ficos Avan√ßados",
            value=feature_enabled("advanced_charts"),
            help="Habilitar gr√°ficos interativos e visualiza√ß√µes avan√ßadas"
        )
        
        if advanced_charts != feature_enabled("advanced_charts"):
            toggle_feature("advanced_charts", advanced_charts)
    
    with col2:
        st.markdown("#### üîÑ Atualiza√ß√£o")
        
        auto_refresh = st.checkbox(
            "Atualiza√ß√£o Autom√°tica",
            value=False,
            help="Atualizar dashboard automaticamente (experimental)"
        )
        
        if auto_refresh:
            refresh_interval = st.slider("Intervalo (segundos)", 30, 300, 60)
    
    # Configura√ß√µes de exibi√ß√£o
    st.markdown("#### üé® Personaliza√ß√£o")
    
    show_sample_warning = st.checkbox(
        "Mostrar aviso sobre dados de exemplo",
        value=True,
        help="Exibir aviso quando usando dados de demonstra√ß√£o"
    )
    
    compact_mode = st.checkbox(
        "Modo Compacto",
        value=False,
        help="Interface mais compacta para telas pequenas"
    )
    
    if st.button("üíæ Salvar Configura√ß√µes"):
        st.success("‚úÖ Configura√ß√µes do dashboard salvas!")

if __name__ == "__main__":
    show_dashboard()
